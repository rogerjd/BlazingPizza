@page "/"
@using BlazingPizza.Models
@using BlazingPizza.Data
@using BlazingPizza.Pages.Shared
@using Dapper
@inject ISQLite3Ctrl sqc
@inject PizzaService pizzaSvc
@inject HttpClient HttpClient
@using BlazingPizza.Components

<PageTitle>Home</PageTitle>

<div class="main">
    <h1>Blazing Pizzas</h1>
    <ul class="pizza-cards">
        @if (specials != null) @*By checking for null in the @if code block, you ensure that Blazor won't try to display
        pizza details before data is obtained from the service.*@
        {
            @foreach (var special in specials)
            {
                <li @onclick="@(() => ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title"> @special.Name</span>
                        @special.Description
                        <span class="price"> @special.BasePrice</span>
                    </div>
                </li>
            }
        }
        else
        {
            <p>We're finding out what pizzas are available today...</p>
        }
    </ul>
</div>

<table>
    <thead>
        <th>Pizza Name</th>
    </thead>
    <tbody>
        @foreach (var pizza in specials)
        {
            <tr>
                <td>@pizza.Name</td>
                <td><button @onclick="ReportPointerLocation"> tbl btn @pizza.Name
                    </button></td>
            </tr>
        }

    </tbody>
</table>

<button @onclick='() => ShowConfigurePizzaDialog(new PizzaSpecial{ Name = "ABCdef"})'>another test</button>

<TestComp></TestComp>

@if (showingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="configuringPizza"></ConfigurePizzaDialog>
}

<h2>@headingValue</h2>
<p>
    <button @onclick="UpdateHeading">
        Update heading
    </button>
</p>

@code {
    //List<PizzaSpecial> specials = new();
    IEnumerable<PizzaSpecial> specials;
    Pizza configuringPizza;
    bool showingConfigureDialog;
    private string headingValue = "Initial heading";

    // A good place to call the service and obtain data is in the OnInitializedAsync method
    // This event fires when the component's initialization is complete and it has received initial parameters but before
    // the page is rendered and displayed to the user.
    protected override async Task OnInitializedAsync()
    {
        // works but: return specials = await pizzaSvc.GetPizzasAsync(sqc);

        // _logger.LogInformation("customer index get");
        using var conn = sqc.Sqlite3Conn;

        @* var p = new { sf1 = LCF.FilterValue + "%" };
//var p2 = new { sf2 = "Address" };
string fieldName = LCF.FilterField ?? "Name"; //todo "Name";
string SortField = LCF.SortField ?? "Name"; //todo "Name";
string SortOrder = LCF.SortOrder ? "DESC" : ""; //todo "Name"; *@



        // var sql = $"select * from Customer where {fieldName} like @sf1 order by {SortField} {SortOrder}";
        var sql = "select * from Pizza";
        specials = await conn.QueryAsync<PizzaSpecial>(sql); //todo: param, p); //todo:.ToList(); //todo: using

        // ShowConfigurePizzaDialog(new PizzaSpecial{ Name = "ABC"});
        @* /return Task.Complete *@
    }

    void ShowConfigurePizzaDialog(PizzaSpecial special)
    {
        configuringPizza = new Pizza()
            {
                Name = special.Name,
                //Special = special,
                //SpecialID = special.ID
                //Size = Pizza.DefaultSize
            };

        showingConfigureDialog = true;
    }

    private void tst()
    {
        Console.WriteLine("on clicke");
    }

    private void ReportPointerLocation(MouseEventArgs e)
    {
        Console.WriteLine("on clicke");
        Console.WriteLine($"Mouse coordinates: {e.ScreenX}:{e.ScreenY}");
    }

    private void UpdateHeading()
    {
        headingValue = $"New heading ({DateTime.Now})";
    }
}
